version: '3.9'

x-php-cli: &php-cli
    build:
        context: ./php-cli
        dockerfile: Dockerfile
        target: ${PHP_CLI_BUILD_TARGET:-${BUILD_TARGET?Build mode php-cli}}
    # restart: unless-stopped
    working_dir: /var/project
    volumes:
        - ../:/var/project

services:
    # Nginx Service
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-nginx
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        ports:
            - ${NGINX_PORT?Not nginx port}:80
        networks:
            - delivery-backend

    # PHP Service
    php-fpm:
        build:
            context: php-fpm
            dockerfile: Dockerfile
            target: ${PHP_FPM_BUILD_TARGET:-${BUILD_TARGET?Build mode php-fpm}}
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-php-fpm
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        depends_on:
            - mysql
        networks:
            - delivery-backend

    # PHP CLI Service
    php-cli:
        <<: *php-cli
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-php-cli
        restart: no
        networks:
            # - my-net
            - delivery-backend

    # Database Service
    mysql:
        image: mysql:${MYSQL_VERSION}
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-mysql
        ports:
            - ${MYSQL_SERVICE_PORT?Not mysql port}:3306
        env_file:
            - ./mysql/modes/.env
        volumes:
            - ./mysql/data:/var/lib/mysql
        networks:
            - delivery-backend

#    # Queue worker: default
#    default-worker:
#        <<: *php-cli
#        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-default-worker
#        restart: unless-stopped
#        depends_on:
#            -   mysql
#        command:
#            ['./artisan', 'queue:work', '--name=default', '--timeout=3', '--tries=3']
#        networks:
#            - delivery-backend

    # Mailhog Service
    mailhog:
        image: mailhog/mailhog:latest
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-mailhog
        restart: unless-stopped
        depends_on:
            - php-fpm
        ports:
            - ${MAILHOG_INTERFACE_PORT?Not mailhog port}:8025
        networks:
            - delivery-backend

    # Swager Service
    swagger-ui:
        image: swaggerapi/swagger-ui
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-swagger-ui
        ports:
            - 8081:8080
        volumes:
            - ../docs:/usr/share/nginx/html/doc
        environment:
            API_URL: doc/api-docs.yaml
            URLS_PRIMARY_NAME: "CheckServer"
            URLS: "[
                     { url: 'doc/admin.yaml', name: 'Admin'},
                     { url: 'doc/client.yaml', name: 'Client'},
                 ]"
        networks:
            - delivery-backend

#    # Redis Minio
#    # https://github.com/amincheloh/cookbook/blob/master/docs/how-to-use-minio-as-laravel-file-storage.md
#    minio:
#        hostname: minio
#        image: minio/minio
#        # image: minio/minio:RELEASE.2024-01-18T22-51-28Z-cpuv1
#        command: server /data --console-address :9001
#        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-minio
#        environment:
#            MINIO_ROOT_USER: minio
#            MINIO_ROOT_PASSWORD: minio123
#        healthcheck:
#            test: [ 'CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live' ]
#            interval: 30s
#            timeout: 20s
#            retries: 3
#        volumes:
#            - ./minio/data:/data
#        ports:
#            - ${MINIO_PORT}:9000
#            - ${MINIO_WEB_INTERFACE_PORT}:9001
#        networks:
#            - delivery-backend

networks:
    delivery-backend:
        driver: bridge
    my-net:
        driver: bridge
        driver_opts:
            com.docker.network.driver.mtu: 1400
